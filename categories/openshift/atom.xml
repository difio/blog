<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenShift | Monupco]]></title>
  <link href="http://monupco.com/blog/categories/openshift/atom.xml" rel="self"/>
  <link href="http://monupco.com/blog/"/>
  <updated>2012-05-03T12:05:09+03:00</updated>
  <id>http://monupco.com/blog/</id>
  <author>
    <name><![CDATA[Monupco Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monupco 1.4 Release Announcement]]></title>
    <link href="http://monupco.com/blog/2012/05/03/monupco-1.4-release-announcement/"/>
    <updated>2012-05-03T12:00:00+03:00</updated>
    <id>http://monupco.com/blog/2012/05/03/monupco-1.4-release-announcement</id>
    <content type="html"><![CDATA[<p>Today <a href="http://monupco.com">Monupco</a> is pleased to announce version 1.4
of our updates monitoring service. Monupco provides user friendly interface to
available updates for your cloud applications and information about different
package versions.</p>

<p>This release adds support for <a href="http://rubygems.org/">RubyGems</a> and
new registration agents for <a href="http://dotcloud.com">dotCloud</a> and
<a href="http://openshift.redhat.com">OpenShift</a> Ruby applications. See
<a href="http://monupco.com/install/">how to install</a> page for more information.</p>

<p>There have been lots of bug fixes and improvements behind the scenes.
Since the <a href="/blog/2012/04/02/monupco-1.3-release-announcement/">1.3 release</a>
we have significantly increased the number of updates processed by the service.
Currently new package versions are detected and published every day.
Monupco has already produced detailed information for 1600+
<a href="https://monupco-otb.rhcloud.com/updates/">updates</a>.</p>

<p>There were some changes to our web site to provide faster page load times:</p>

<ul>
<li>Static files are now served from <em>Amazon CloudFront</em>;</li>
<li>Individual update pages use <em>JSONP</em> to dynamically load the content.</li>
</ul>


<p><a href="https://monupco-otb.rhcloud.com/applications/mine/">Give it a try</a>
or <a href="https://twitter.com/monupco">follow us</a> on Twitter for more news.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenShift as Amazon CloudFront origin server]]></title>
    <link href="http://monupco.com/blog/2012/04/17/using-openshift-as-amazon-cloudfront-origin-server/"/>
    <updated>2012-04-17T17:30:00+03:00</updated>
    <id>http://monupco.com/blog/2012/04/17/using-openshift-as-amazon-cloudfront-origin-server</id>
    <content type="html"><![CDATA[<p>It's been several months after the start of <a href="http://monupco.com"><em>Monupco</em></a> and we started
migrating various parts of the platform to CDN. The first to go are static 01 like
CSS, JavaScript, images and such. In this article I will show you how to get started with
<em>Amazon CloudFront</em> and <em>OpenShift</em>. It is very easy once you understand how it works.</p>

<h2>Why CloudFront and OpenShift</h2>

<p><em>Amazon CloudFront</em> is cheap and easy to setup with virtually no maintenance.
The most important feature 04 that it can fetch content from any public website.
Integrating it together with <em>OpenShift</em> gives some nice benefits:</p>

<ul>
<li>All static assets are managed with Git and stored in the same place where the application
code and HTML is - easy to develop and deploy;</li>
<li>No need for external service to host the static files;</li>
<li><em>CloudFront</em> will be serving the files so network load on <em>OpenShift</em> is minimal;</li>
<li>Easy to manage versioned URLs because HTML and static assets are in the same repo - more on this later;</li>
</ul>


<h2>Object expiration</h2>

<p><em>CloudFront</em> will cache your objects for a certain period and then expire them. Frequently
used objects are expired less often. Depending on the content you may want to update the cache
more or less frequently. In my case CSS and JavaScript files change rarely so I wanted to tell
CloudFront to not expire the files quickly. I did this by telling <em>Apache</em> to send a custom value for
the Expires header.</p>

<pre><code>    $ curl http://d71ktrt2emu2j.cloudfront.net/static/v1/css/style.css -D headers.txt
    $ cat headers.txt 
    HTTP/1.0 200 OK
    Date: Mon, 16 Apr 2012 19:02:16 GMT
    Server: Apache/2.2.15 (Red Hat)
    Last-Modified: Mon, 16 Apr 2012 19:00:33 GMT
    ETag: "120577-1b2d-4bdd06fc6f640"
    Accept-Ranges: bytes
    Content-Length: 6957
    Cache-Control: max-age=31536000
    Expires: Tue, 16 Apr 2013 19:02:16 GMT
    Content-Type: text/css
    Strict-Transport-Security: max-age=15768000, includeSubDomains
    Age: 73090
    X-Cache: Hit from cloudfront
    X-Amz-Cf-Id: X558vcEOsQkVQn5V9fbrWNTdo543v8VStxdb7LXIcUWAIbLKuIvp-w==,e8Dipk5FSNej3e0Y7c5ro-9mmn7OK8kWfbaRGwi1ww8ihwVzSab24A==
    Via: 1.0 d6343f267c91f2f0e78ef0a7d0b7921d.cloudfront.net (CloudFront)
    Connection: close
</code></pre>

<p>All headers before Strict-Transport-Security come from the origin server.</p>

<h2>Versioning</h2>

<p>Sometimes however you need to update the files and force <em>CloudFront</em> to update the content.
The recommended way to do this is to use URL versioning and update the path to the files
which changed. This will force <em>CloudFront</em> to cache and serve the content under the new path
while keeping the old content available until it expires. This way your visitors will not be
viewing your site with the new CSS and old JavaScript.</p>

<p>There are many ways to do this and there are some nice frameworks as well. For Python there is <em>webassets</em>.
I don't have many static files so I opted for no additional dependencies. Instead I will be updating the
versions by hand.</p>

<p>What comes to mind is using <em>mod_rewrite</em> to redirect the versioned URLs back to non versioned ones.
However there's a catch. If you do this <em>CloudFront</em> will cache the redirect itself, not the content.
The next time visitors hit <em>CloudFront</em> they will receive the cached redirect and follow it back to your
origin server, which is defeating the purpose of having CDN.</p>

<p>To do it properly you have to rewrite the URLs but still return a 200 response code and the
content which needs to be cached. This is done with <em>mod_proxy</em>:</p>

<pre><code>    RewriteEngine on
    RewriteRule ^VERSION-(\d+)/(.*)$ http://%{ENV:OPENSHIFT_INTERNAL_IP}:%{ENV:OPENSHIFT_INTERNAL_PORT}/static/$2 [P,L]
</code></pre>

<p>This .htaccess trick doesn't work on <em>OpenShift</em> though. <em>mod_proxy</em> is not enabled at the moment.
See <a href="https://bugzilla.redhat.com/show_bug.cgi?id=812389">bug 812389</a> for more info.</p>

<p>Luckily I was able to use symlinks to point to the content. Here's how it looks:</p>

<pre><code>    $ pwd
    /home/atodorov/monupco/wsgi/static

    $ cat .htaccess
    ExpiresActive On
    ExpiresDefault "access plus 1 year"

    $ ls -l
    drwxrwxr-x. 6 atodorov atodorov 4096 16 Apr 21,31 o
    lrwxrwxrwx. 1 atodorov atodorov    1 16 Apr 21,47 v1 -&gt; o

    settings.py:
    STATIC_URL = '//d71ktrt2emu2j.cloudfront.net/static/v1/'

    HTML template:
    &lt;link type="text/css" rel="stylesheet" media="screen" href="{{ STATIC_URL }}css/style.css" /&gt;
</code></pre>

<h2>How to implement it</h2>

<p>First you need to split all CSS and JavaScript from your HTML if you haven't done so already.</p>

<p>Then place everything under your git repo so that <em>OpenShift</em> will serve the files. For Python applications
place the files under wsgi/static/ directory in your git repo.</p>

<p>Point all of your HTML templates to the static location on <em>OpenShift</em> and test if everything works as expected.
This is best done if you're using some sort of template language and store the location
in a single variable which you can change later.
<em>Monupco</em> uses <em>Django</em> and the <em>STATIC_URL</em> variable of course.</p>

<p>Create your <em>CloudFront</em> distribution - don't use <em>Amazon S3</em>, instead configure a custom origin server. Write down
your <em>CloudFront</em> URL. It will be something like <strong>1234xyz.cludfront.net</strong>.</p>

<p>Every time a request hits <em>CloudFront</em> it will check if the object is present in the cache. If not present
<em>CloudFront</em> will fetch the object from the origin server and populate the cache. Then the object is sent
to the user.</p>

<p>Update your templates to point to the new cloudfront.net URL and redeploy your website!</p>

<hr />

<p><a href="http://about.me/atodorov"><em>Alexander Todorov</em></a> is Monupco's founder and lead developer!</p>

<p>For an insight of available updates to you OpenShift applications give
Monupco a <a href="https://monupco-otb.rhcloud.com/applications/mine/">try</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monupco 1.3 Release Announcement]]></title>
    <link href="http://monupco.com/blog/2012/04/02/monupco-1.3-release-announcement/"/>
    <updated>2012-04-02T10:17:00+03:00</updated>
    <id>http://monupco.com/blog/2012/04/02/monupco-1.3-release-announcement</id>
    <content type="html"><![CDATA[<p>Today <a href="http://monupco.com">Monupco</a> is pleased to announce version 1.3
of our updates monitoring service. Monupco provides user friendly interface to
monitor available updates for your cloud applications and information about different
package versions.</p>

<p>This release adds support for Perl packages from <a href="http://search.cpan.org/">CPAN</a>.
Request Tracker issue tracking systems on <a href="http://rt.cpan.org">http://rt.cpan.org</a> and <a href="http://rt.perl.org">http://rt.perl.org</a>
are also supported.</p>

<p>Perl support comes with registration agents for <a href="http://dotcloud.com">dotCloud</a> and
<a href="http://openshift.redhat.com">OpenShift</a>. See the
<a href="http://monupco.com/install/">how to install page</a> for more information.</p>

<p>Our web interface faced some changes too:</p>

<ul>
<li>Details about changes is no longer processed as Markdown. It is presented as
pre-formatted plain text. This is to prevent some characters (like underscores) getting
lost due to Markdown conversion;</li>
<li>Update pages now integrate with <a href="http://disqus.com">Disqus</a>. You can use the comments form
to provide general feedback and comments and to alert our team in case the information
is incorrect.</li>
</ul>


<p>Monupco has already produced detailed information for 950+ <a href="https://monupco-otb.rhcloud.com/updates/">updates</a>.</p>

<p><a href="https://monupco-otb.rhcloud.com/applications/mine/" class="button dark_blue small">Give It A Try</a>
or <a href="https://twitter.com/monupco">follow us</a> on Twitter for more news.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenShift Cron Takes Over Celerybeat]]></title>
    <link href="http://monupco.com/blog/2012/03/14/openshift-cron-takes-over-celerybeat/"/>
    <updated>2012-03-14T20:48:00+02:00</updated>
    <id>http://monupco.com/blog/2012/03/14/openshift-cron-takes-over-celerybeat</id>
    <content type="html"><![CDATA[<p><a href="http://celeryproject.org/"><em>Celery</em></a> is an asynchronous task queue/job queue
based on distributed message passing. You can define tasks as Python functions,
execute them in the background and in a periodic fashion.
<a href="http://monupco.com"><em>Monupco</em></a> uses <em>Celery</em> for virtually everything.
Some of the tasks are scheduled after some event takes place (like user pressed a button)
or scheduled periodically.</p>

<p><em>Celery</em> provides several components of which <em>celerybeat</em> is the periodic task scheduler.
When combined with <a href="http://djangoproject.com"><em>Django</em></a> it gives you a very nice admin interface
which allows periodic tasks to be added to the scheduler.</p>

<h2>Why change</h2>

<p><em>Monupco</em> has relied on <em>celerybeat</em> for a couple of months. Back then, when <em>Monupco</em> launched,
there was no cron support for OpenShift so running <em>celerybeat</em> sounded reasonable.
It used to run on a dedicated virtual server and for most of the time that was fine.</p>

<p>There were a number of issues which <em>Monupco</em> faced during its first months:</p>

<ul>
<li><p><em>celerybeat</em> would sometime die due to no free memory on the virtual instance.
When that happened no new tasks were scheduled and data was left unprocessed.
Let alone that higher memory instance and the processing power which comes with it
cost extra money.</p></li>
<li><p><em>Monupco</em> is split into several components which need to have the same code base
locally - the most important are database settings and the periodic tasks
code. At least in one occasion <em>celerybeat</em> failed to start because of a buggy
task code. The offending code was fixed in the application server on OpenShift but
not properly synced to the <em>celerybeat</em> instance. Keeping code in sync is a priority
for distributed projects which rely on <em>Celery</em>.</p></li>
<li><p><em>Celery</em> and <em>django-celery</em> seem to be updated quite often. This poses a significant risk
of ending up with different versions on the scheduler, worker nodes and the app server. This will
bring the whole application to a halt if at some point a backward incompatible change is introduced
and not properly tested and updated. Keeping infrastructure components in sync can be a big challenge
and I try to minimize this effort as much as possible.</p></li>
<li><p>Having to navigate to the admin pages every time I add a new task or want to change the execution
frequency doesn't feel very natural for a console user like myself and IMHO is less productive.
For the record I primarily use <em>mcedit</em>. I wanted to have something more close to the
write, commit and push work-flow.</p></li>
</ul>


<h2>The take over</h2>

<p>It's been some time since OpenShift
<a href="https://www.redhat.com/openshift/community/blogs/getting-started-with-cron-jobs-on-openshift">introduced</a>
the cron cartridge and I decided to give it a try.</p>

<p>The first thing I did is to write a simple script which can execute any task from the monupco.tasks module
by piping it to the Django shell (a Python shell actually).</p>

<pre><code>$ cat run_celery_task 

#!/bin/bash
#
# Copyright (c) 2012, Alexander Todorov &lt;atodorov@nospam.otb.bg&gt;
#
# This script is symlinked to from the hourly/minutely, etc. directories
#
# SYNOPSIS
#
# ./run_celery_task cron_search_dates
#
# OR
#
# ln -s run_celery_task cron_search_dates
# ./cron_search_dates
#

TASK_NAME=$1
[ -z "$TASK_NAME" ] &amp;&amp; TASK_NAME=$(basename $0)

if [ -n "$OPENSHIFT_APP_DIR" ]; then
    source $OPENSHIFT_APP_DIR/virtenv/bin/activate
    export PYTHON_EGG_CACHE=$OPENSHIFT_DATA_DIR/.python-eggs
    REPO_DIR=$OPENSHIFT_REPO_DIR
else
    REPO_DIR=$(dirname $0)"/../../.."
fi

echo "import monupco.tasks; monupco.tasks.$TASK_NAME.delay()" | $REPO_DIR/wsgi/monupco/manage.py shell
</code></pre>

<p>This is a multicall script which allows symlinks with different names to point to it.
Thus to add a new task to cron I just need to make a symlink to the script from one of the
hourly, minutely, daily, etc. directories under cron/</p>

<p>The script accepts a parameter as well which allows me to execute it locally for debugging purposes
or to schedule some tasks out of band.</p>

<p>This is how it looks like on the file system:</p>

<pre><code>$ ls -l .openshift/cron/hourly/
some_task_name -&gt; ../tasks/run_celery_task
another_task -&gt; ../tasks/run_celery_task
</code></pre>

<p>After having done these preparations I only had to embed the cron cartridge and git push to OpenShift:</p>

<pre><code>rhc-ctl-app -a monupco -e add-cron-1.4 &amp;&amp; git push
</code></pre>

<h2>What's next</h2>

<p>At present OpenShift can schedule your jobs every minute, hour, day, week or month and does so using the
<em>run-parts</em> script. You can't schedule a script to execute at 4:30 every Monday or every 45 minutes for example.
See <a href="https://bugzilla.redhat.com/show_bug.cgi?id=803485">rhbz #803485</a> if you want to follow the
progress. Luckily <em>Monupco</em> doesn't use this sort of job scheduling for the moment.</p>

<p><em>Monupco</em> is scheduling periodic tasks from OpenShift cron for a few days already.
It seems to work reliably and with no issues. One less component to maintain and worry about.
More time to write code.</p>

<hr />

<p><a href="http://about.me/atodorov"><em>Alexander Todorov</em></a> is Monupco's founder and lead developer!</p>

<p>For an insight of available updates to you OpenShift applications give
Monupco a <a href="https://monupco-otb.rhcloud.com/applications/mine/">try</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get to the OpenShift shell]]></title>
    <link href="http://monupco.com/blog/2012/03/09/how-to-get-to-the-openshift-shell/"/>
    <updated>2012-03-09T21:43:00+02:00</updated>
    <id>http://monupco.com/blog/2012/03/09/how-to-get-to-the-openshift-shell</id>
    <content type="html"><![CDATA[<p>I wanted to examine the Perl environment on OpenShift and got tired of making snapshots,
unzipping the archive and poking through the files. I wanted a shell. Here's how to get one.</p>

<ol>
<li><p>Get the application info first</p>

<pre><code> $ rhc-domain-info 
 Password: 
 Application Info
 ================
 myapp
     Framework: perl-5.10
      Creation: 2012-03-08T13:34:46-04:00
          UUID: 8946b976ad284cf5b2401caf736186bd
       Git URL: ssh://8946b976ad284cf5b2401caf736186bd@myapp-mydomain.rhcloud.com/~/git/myapp.git/
    Public URL: http://myapp-mydomain.rhcloud.com/

  Embedded: 
       None
</code></pre></li>
<li><p>The Git URL has your username and host</p></li>
<li><p>Now just ssh into the application</p>

<pre><code> $ ssh 8946b976ad284cf5b2401caf736186bd@myapp-mydomain.rhcloud.com

     Welcome to OpenShift shell

     This shell will assist you in managing OpenShift applications.

     !!! IMPORTANT !!! IMPORTANT !!! IMPORTANT !!!
     Shell access is quite powerful and it is possible for you to
     accidentally damage your application.  Proceed with care!
     If worse comes to worst, destroy your application with 'rhc app destroy'
     and recreate it
     !!! IMPORTANT !!! IMPORTANT !!! IMPORTANT !!!

     Type "help" for more info.

 [myapp-mydomain.rhcloud.com ~]\&gt; 
</code></pre></li>
</ol>


<p><strong>Voila!</strong></p>

<hr />

<p><a href="http://about.me/atodorov"><em>Alexander Todorov</em></a> is Monupco's founder and lead developer!</p>

<p>For an insight of available updates to you OpenShift applications give
Monupco a <a href="https://monupco-otb.rhcloud.com/applications/mine/">try</a>!</p>
]]></content>
  </entry>
  
</feed>
